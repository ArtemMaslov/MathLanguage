Выполнение начинается с главной функции, которая называется "начало программы".
	Синтаксис:
		начало программы
		{
			<Код>
		}


Выражением является послеовательность, содержащая операции над числами и функциями.
В выражениях обязательно указывать все операторы. Отсутствие оператора трактуется как синтаксическая ошибка.
Оператором называется исполняемая команда.
Признаком конца оператора является точка '.'.
Блоком кода называется последовательность операторов, выполняемых друг за другом.

Однострочным комментарием является '//'. Многострочным /**/
Пример:
	Оператор1.// Это комментарий
	Оператор3. 	       /*Многострочный
		комментарий*/

Разделителем блоков кода (показывающих принадлежность к оператору) служат символы табуляции или 4 пробела и фигурные скобки. Символы табуляции интерпретируются как 4 пробела.
Если не указаны фигурные скобки, то будет использоваться табуляция, при этом начальным уровнем отсчёта табуляции является уровень верхнего оператора.
	Пример:
		Считаем, что Операторы 1, 2, 4, 6 не могут иметь вложенные блоки.
		Если же они могут содержать блоки, то Оператор 3 будет входить в блок Оператора 2. Но Оператор 5 не будет считаться блоком Оператора 4.
	...
		Оператор 1
		  Оператор 2
		      Оператор 3
			      Блок Оператора 3
		  Оператор 4
	            Оператор 5
				    Блок Оператора 5
		Оператор 6
	...
Если же фигурные скобки указаны, то табуляция для текущего блока игнорируется, но табуляция всё ещё будет учитываться для подблоков.

Для зарезервированных имён регистр не имеет значения.
Зарезервированными являются:
цел/целое                  кос/косинус                если
вещ/вещественное           син/синус                  пока
сим/символ                 тг/тангенс                 для всех
стр/строка                 ктг/котангенс              возвр
_                          рад                        вернуть
_                          град                       от
_                          корень                     до
_                          куб_корень                 то
_                          лн/лог/логарифм            вкл/включительно
_                          лг                         выполнить
_                          пи                         _
_                          эксп                       _
_                          сш/синус_гиперболический   _
_                          кш/косинус_гиперболический _
_                          _                          _
_                          _                          _
_                          _                          _
_                          _                          _

Обозначения:
рад     - радианы.
град    - градусы.
лн/лог  - натуральный логарифм.
лг      - десятичный  логарифм.

Именами функций и переменных могут быть любые UTF8 символы, кроме:
1) На первом месте не могут стоять: цифры 0-9, символы !@#$%^&*()+|}{":?><-=\[];',./`~
2) Имя функции не может содержать пробел, символы табуляции и новой строки.
??? 3) Имя функции не может содержать следующие символы: !@#$%^&*()+|}{":?><-=\[];',./`~

Именами переменных могут быть любые UTF8 символы, кроме:
1) На первом месте не могут стоять: цифры 0-9, символы !@#$%^&*()+|}{":?><-=\[];',./`~
2) Имя переменной не может содержать пробел, символы табуляции и новой строки.
??? 3) Имя переменной не может содержать следующие символы: !@#$%^&*()+|}{":?><-=\[];',./`~

Переменные не имеют типа и считаются все double.

Объвление переменной
	Синтаксис:
		<Имя переменной> [= выражение].
	Пример:
		а = 5.
		б = 10 * а - 30 + кос(30 град.).
		в. // Обявление переменной
		в = 30. // Инициализация.
	Если не указано выражение, то переменная инициализируется стандартным значением.
	Стандартные значения:
	1) Для double это 0.
	2) Для массива это массив из нулевых элементов.
		
Объвление функции
	Синтаксис:
		[возвр] <Имя функции>([параметры])
		{
			[Блок кода]
		}
	Пример:
		возвр Функция1(а, б, в)
		{
			вернуть б^2 - 4*а*в.
		}
	Если функция возвращает значение, необходимо указать возвр.
	Функция может принимать параметры, которые перечисляются через запятую.
	Чтобы вернуть значение из функции используется команда вернуть.


Вызов функции:
	Синтаксис:
		<Имя функции>([передаваемые в качестве параметров значения]).
		

Условный оператор:
	Синтаксис:
		если <условное выражение>, то
			<Блок операторов>
		[иначе если] <условное выражение>, то
			<Блок операторов>
		[иначе]
			<Блок операторов>
			
Цикл пока:
	Синтаксис:
		Пока <условное выражание> <':' или 'выполнить' или 'выполнить:'>
			<Блок операторов>
	Примеры:
		Пока 2 <= а <= 10:
			<Блок операторов>
		Пока 2 <= а <= 10 выполнить
			<Блок операторов>
		Пока 2 <= а <= 10 выполнить:
			<Блок операторов>
	Выполняет блок операторов, пока условное выражение истинно.
	
Цикл для всех:
	Синтаксис:
		1) Для всех [<инициализация>,] [<условие завершения>], [<шаг>] <':' или 'выполнить' или 'выполнить:'>
		       <Блок операторов>
		
		2) Для всех <имя переменной> от <константное выражение> до <константное выражение> [включительно] [по <шаг>] <':' или 'выполнить' или 'выполнить:'>
		       <Блок операторов>
		
	Пример:
		Для всех ст = 1, ст <= ч, ст++:
			<Блок операторов>
			
		Для всех 1 <= ст <= ч, ст++ выполнить // Первое условие можно опустить вместе с запятой
			<Блок операторов>
			
		Для всех , 1 <= ст <= ч, ст++ выполнить // Первое условие можно опустить, но запятую оставить
			<Блок операторов>
			
		Для всех ст = 1, , ст++ выполнить:	// Бесконечный цикл
			<Блок операторов>
			
		Для всех ст от 1 до ч по 1:
			<Блок операторов>
			
		Для всех ст от 1 до ч включительно по 1 выполнить
			<Блок операторов>
			
		Для всех ст от 1 до ч включительно по 0.01 выполнить:
			<Блок операторов>
			